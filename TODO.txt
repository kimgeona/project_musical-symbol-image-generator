== TODO ==
- MSIG::Rendering::Canvas::draw_thread() 함수 작성하기
- MSIG::Processing::Brush 클래스 작성 완료하기
- MSIG::Rendering::Canvas::draw() 함수에 Dynamic Programming 기법 적용 하여 데이터셋 생성 속도 증가시키기.

== 좋은 개발에 대한 고민 ==
- 헤더파일과 소스파일에 주석을 어떻게 달아야 몇 개월 뒤에 작업해도 바로 쉽게 알아볼 수 있을까?
- 개발한 클래스들을 서로 내부적 변수로 많이 사용하는데, 예외 처리를 어떻게 해야 할까? 사용자 예외 처리 클래스를 만드는게 나을까? 어떻게 하면 예외처리 구문을 잘 활용할 수 있을까?
- 주석과 관련된 것을 알아보니 TODO, FIXME, HACK, XXX, ... 와 같은 것들이 있네? 이런것을 활용하면 괜찮으려나?

== 프로젝트 고민 ==
- 악상기호 조합이 너무 많아.. 메모리가 지금도 20GB를 잡아먹는데 이를 데이터셋 생성할때마다 조합을 다시 생성하는 것은 무리가 있는 것 같아. 이를 저장을 해두는게 나으려나..?
- CMake를 이용하여 빌드하는 것이 최선일까? 그냥 make를 사용하는 것은..? 현재 CMake로 만든 프로젝트는 IDE의 성능을 최대로 활용하지 못하는 것 같은데.. macos가 업데이트되면 SDK를 찾을 수 없어서 다시 빌드해야되는 일도 생기고 말야..
- Makefile대신 Docker를 이용하여 프로젝트 준비를 자동화 하는 것은 어떨까? (실제로 Makefile을 이용하여 프로젝트 생성을 자동화하였는데 너무 편리함.)

== 궁금증 ==
- 나중에 문제가 생겼을때 자기가 작성했던 커밋들을 확인해야하는 일이 생길 것 같은데, 좋은 커밋 작성을 하는 방법이 궁금하다.
- 예전에는 DEBUG 메그로를 이용해 프로그램을 디버깅한 것 같은데, 어떤 방식으로 DEBUG을 사용한 것일까? 지금 나는 컴파일하고 BreakPoint를 걸어서 런타임 환경에서 직접 변수들을 확인하고 있는데.. 과거에는 어떤 방식으로 디버깅을 했을까? 과연 이게 지금도 쓸만할까..?

== DONE ============================================================
- 데이터셋을 train, validation, test 이렇게 세개 만들도록 코드 수정
- piece 디렉토리 삭제 및 코드 수정하기
- 코드 정리 하기
- 데이터셋 검토
- 데이터셋의 이미지들을 정사각형 크기로 만들기 -> 나중에 가공해서 사용하기 유리하게
- 기본 악상기호 데이터셋 구성이 쉽도록 코드 수정 -> 다양한 스타일의 악상기호로 데이터셋 새로 구성 -> 표준화 되어있지 않은 악상기호 이미지들 대응